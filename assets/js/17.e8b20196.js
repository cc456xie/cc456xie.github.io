(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{438:function(s,e,a){"use strict";a.r(e);var r=a(53),v=Object(r.a)({},(function(){var s=this,e=s.$createElement,a=s._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"serverless-大前端的思考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#serverless-大前端的思考"}},[s._v("#")]),s._v(" serverless-大前端的思考")]),s._v(" "),a("h2",{attrs:{id:"起因"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#起因"}},[s._v("#")]),s._v(" 起因")]),s._v(" "),a("p",[s._v('最近了解了一个新名词 "serverless"，直译过来即'),a("code",[s._v("无服务器")]),s._v("，初见这个词，大概就想到了这应该是前端工程化到大前端时代的延申了。 干掉服务器，多么令人玩味的意思。 我对这个新技术有了比较一些的兴趣，\n便去了解了一下。但是由于个人水平有限，不能深入探究，只是了解了一下他的定义和应用方式。")]),s._v(" "),a("p",[s._v("以下只是"),a("code",[s._v("个人思考")]),s._v("和"),a("code",[s._v("资料查阅")]),s._v("，不代表正确观点")]),s._v(" "),a("h2",{attrs:{id:"前端时代变更"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前端时代变更"}},[s._v("#")]),s._v(" 前端时代变更")]),s._v(" "),a("p",[s._v("说serveless之前，我还是去探究了一下前端的发展阶段。目前来说可以分为"),a("strong",[s._v("4")]),s._v("个阶段：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://pic2.zhimg.com/80/v2-39e681384c57286255996fc51b051af9_720w.jpg",alt:"前端阶段"}})]),s._v(" "),a("h3",{attrs:{id:"前端0-0-www时代"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前端0-0-www时代"}},[s._v("#")]),s._v(" 前端0.0:WWW时代")]),s._v(" "),a("p",[s._v("90年代初，世界上第一个Web浏览器（WorldWideWeb）诞生。这个时间可以算是前端的0.0时代。在那个时候，其实还没有前端工程师这个职业，前端的工作要么由UI来完成，要么就是后端工程师一把梭。一般就是表单提交，静态UI这些东西了。")]),s._v(" "),a("h3",{attrs:{id:"前端1-0：ajax时代"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前端1-0：ajax时代"}},[s._v("#")]),s._v(" 前端1.0：AJAX时代")]),s._v(" "),a("p",[s._v("AJAX的出现，为前端带来了新的生机。AJAX的异步数据交互请求使得前端工程师也能关注数据和逻辑的交互了。从此之后，网页具有了动态性，前端也具有了新的活力。")]),s._v(" "),a("h3",{attrs:{id:"前端2-0：node-js时代"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前端2-0：node-js时代"}},[s._v("#")]),s._v(" 前端2.0：Node.JS时代")]),s._v(" "),a("p",[s._v("Node.js的出现，打破了前端与服务端之间语言的壁垒。前端工程师可以通过JavaScript编写运行在服务端的程序，也使得前端和后端之间的界限稍微变得模糊了。 除此之外，Node为前端工程化的发展提供了土壤。")]),s._v(" "),a("h3",{attrs:{id:"前端2-x：mvvm时代"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前端2-x：mvvm时代"}},[s._v("#")]),s._v(" 前端2.x：MVVM时代")]),s._v(" "),a("p",[s._v("MVVM框架让前端工程师从操作DOM转变为面向数据，组件化开发也为前端工程化带来了发展。但是严格意义来说，我认为MVVM算不上一次时代的变更，因为MVVM只是为前端领域带来了变革，而不像之前三次革命一样，为前后端都带来了巨大的变革。")]),s._v(" "),a("h3",{attrs:{id:"大前端时代：-serverless？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#大前端时代：-serverless？"}},[s._v("#")]),s._v(" 大前端时代： serverless？")]),s._v(" "),a("p",[a("code",[s._v("大前端")]),s._v("这个词已经提了很久了，大家对这个词的理解也都各不一致。我对这个词的理解是："),a("strong",[s._v("前端尽可能完成自己能完成的事，向深度和广度尽力开拓")]),s._v("。  比如，以前的开发一般都是前端工程师将静态网页做出来，然后扔给后端，后端嵌入JSP,PHP脚本中生成动态网页。\n而现在，大多数都是采用前后端分离的开发模式了，前端通过各种请求库获取JSON数据，然后动态的表现到视图层，对比来看，前端能做的事更多了，这是深度的拓展。   flutter，react native，uni-app，taro，小程序等多端全端开发方案的出现，代表着前端广度的拓展，所以说\n，大前端不是一个具体的规范，而是一个发展趋势和方向。")]),s._v(" "),a("p",[a("code",[s._v("serverless")]),s._v("的理念是将本该服务器管理、数据库管理等工作交给第三方平台，从而开发者能够将重心放在业务逻辑、数据交互等工作上，完成真正意义上的"),a("strong",[s._v("全栈")]),s._v("。")]),s._v(" "),a("p",[s._v("与serverless对应的的一种架构模式叫做"),a("code",[s._v("BFF")]),s._v("（Backends for Frontend，为前端服务的后端）。BFF是在原有的一体化服务端基础上，再为不同的业务平台单独开发出一个独特的、差异化的服务。")]),s._v(" "),a("blockquote",[a("p",[s._v("BFF承担了一部分的业务逻辑，这部分逻辑通常是平台独有的。举一个现实中的例子：在线视频提供商有多种平台，比如网站、app。由于版权限制有些影片只能在特定的平台播放。具化到技术层面，实现此类逻辑包含分平台鉴权、数据查询策略等等，这些便是典型的平台差异化业务逻辑。独立于核心业务逻辑之外的BFF层能够实现差异化逻辑的松耦合，进而令迭代和维护更高效和安全。")])]),s._v(" "),a("p",[s._v("BFF本质上仍然是服务层，除了编程语言之外，一名合格的服务端开发者还需要具备一些独有的领域知识以及服务管理、数据管理理念。所以目前大多数BFF仍然由传统前端之外的专人负责，即便是Node.js BFF。\n也就是说，BFF并未解决前端成为全栈的关键性问题，而这些问题便是Serverless的针对点。")]),s._v(" "),a("p",[s._v("Serverless由开发者实现的服务端逻辑运行在无状态的计算容器中，它由事件触发， 完全被第三方管理，其业务层面的状态则被开发者使用的数据库和存储资源所记录。Serverless涵盖了很多技术，分为两类：FaaS和BaaS。")]),s._v(" "),a("p",[s._v("FaaS："),a("strong",[s._v("函数即服务")])]),s._v(" "),a("blockquote",[a("p",[s._v("FaaS意在无须自行管理服务器系统或自己的服务器应用程序，即可直接运行后端代码。其中所指的服务器应用程序，是该技术与容器和PaaS（平台即服务）等其他现代化架构最大的差异。")])]),s._v(" "),a("p",[s._v("BaaS: "),a("strong",[s._v("后端即服务")])]),s._v(" "),a("blockquote",[a("p",[s._v("Baas 是指我们不再编写或管理所有服务端组件，可以使用领域通用的远程组件（而不是进程内的库）来提供服务。理解BaaS，需要搞清楚它与PaaS的区别。")])]),s._v(" "),a("p",[s._v("首先BaaS并非PaaS，它们的区别在于：PaaS需要参与应用的生命周期管理，BaaS则仅仅提供应用依赖的第三方服务。\n典型的PaaS平台需要提供手段让开发者部署和配置应用，例如自动将应用部署到Tomcat容器中，并管理应用的生命周期。\nBaaS不包含这些内容，BaaS只以API的方式提供应用依赖的后端服务，例如数据库和对象存储。BaaS可以是公共云服务商提供的，\n也可以是第三方厂商提供的。其次从功能上讲，BaaS可以看作PaaS的一个子集，即提供第三方依赖组件的部分。")]),s._v(" "),a("h4",{attrs:{id:"毫无疑问，serverless的发展会为前端领域带来新的机遇，将服务器端的工作抽离到第三方，可以让前端工程师能更好的完成业务的开发，从前到后一手掌控，真正的将大前端的深度扩展到前所未有的地步，我很期待serverless为前端乃至整个互联网行业带来的新气象。目前很多企业已经推出了各自的serverless业务，可以预想未来serverless的发展会是整个行业一个值得关注的话题。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#毫无疑问，serverless的发展会为前端领域带来新的机遇，将服务器端的工作抽离到第三方，可以让前端工程师能更好的完成业务的开发，从前到后一手掌控，真正的将大前端的深度扩展到前所未有的地步，我很期待serverless为前端乃至整个互联网行业带来的新气象。目前很多企业已经推出了各自的serverless业务，可以预想未来serverless的发展会是整个行业一个值得关注的话题。"}},[s._v("#")]),s._v(" 毫无疑问，serverless的发展会为前端领域带来新的机遇，将服务器端的工作抽离到第三方，可以让前端工程师能更好的完成业务的开发，从前到后一手掌控，真正的将大前端的深度扩展到前所未有的地步，我很期待serverless为前端乃至整个互联网行业带来的新气象。目前很多企业已经推出了各自的serverless业务，可以预想未来serverless的发展会是整个行业一个值得关注的话题。")])])}),[],!1,null,null,null);e.default=v.exports}}]);