(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{436:function(e,r,s){"use strict";s.r(r);var t=s(53),a=Object(t.a)({},(function(){var e=this,r=e.$createElement,s=e._self._c||r;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"promise解析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#promise解析"}},[e._v("#")]),e._v(" promise解析")]),e._v(" "),s("h2",{attrs:{id:"描述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#描述"}},[e._v("#")]),e._v(" 描述")]),e._v(" "),s("p",[e._v("Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。它由社区最早提出和实现，ES6 将其写进了语言标准，统一了用法，原生提供了Promise对象。")]),e._v(" "),s("p",[e._v("所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。")]),e._v(" "),s("h2",{attrs:{id:"特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[e._v("#")]),e._v(" 特点")]),e._v(" "),s("p",[e._v("Promise对象有以下两个特点。")]),e._v(" "),s("p",[e._v("（1）对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态："),s("strong",[e._v("pending（进行中）、fulfilled（已成功）和rejected（已失败）")]),e._v("。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。")]),e._v(" "),s("p",[e._v("（2）一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从pending变为fulfilled和从pending变为rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为 resolved（已定型）。如果改变已经发生了，你再对Promise对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。")]),e._v(" "),s("p",[e._v("Promise也有一些缺点。首先，"),s("strong",[e._v("无法取消Promise")]),e._v("，一旦新建它就会立即执行，无法中途取消。其次，如果不设置回调函数，"),s("strong",[e._v("Promise内部抛出的错误，不会反应到外部")]),e._v("。第三，当处于pending状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。")]),e._v(" "),s("h2",{attrs:{id:"基本用法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本用法"}},[e._v("#")]),e._v(" 基本用法")]),e._v(" "),s("p",[e._v("ES6 规定 ，Promise对象是一个构造函数，用来生成Promise实例。")]),e._v(" "),s("p",[e._v("下面代码创造了一个Promise实例。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("   const promise = new Promise(function(resolve, reject) {\n  // ... some code\n\n  if (/* 异步操作成功 */){\n    resolve(value);\n  } else {\n    reject(error);\n  }\n});\n\n")])])]),s("p",[s("strong",[e._v("Promise构造函数")]),e._v("接受一个函数作为参数，该函数的两个参数分别是"),s("strong",[e._v("resolve")]),e._v("和"),s("strong",[e._v("reject")]),e._v("。它们是两个函数，由 JavaScript 引擎提供，不用自己部署。")]),e._v(" "),s("p",[s("strong",[e._v("resolve函数")]),e._v("的作用是，将Promise对象的状态从“"),s("strong",[e._v("未完成")]),e._v("”变为“"),s("strong",[e._v("成功")]),e._v("”（即从 "),s("strong",[e._v("pending")]),e._v(" 变为 "),s("strong",[e._v("resolved")]),e._v("），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；reject函数的作用是，将Promise对象的状态从“"),s("strong",[e._v("未完成")]),e._v("”变为“"),s("strong",[e._v("失败")]),e._v("”（即从 "),s("strong",[e._v("pending")]),e._v(" 变为 "),s("strong",[e._v("rejected")]),e._v("），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。")]),e._v(" "),s("hr"),e._v(" "),s("p",[e._v("Promise实例生成以后，可以用"),s("strong",[e._v("then")]),e._v("方法分别指定resolved状态和rejected状态的"),s("strong",[e._v("回调函数")]),e._v(":")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("promise.then(function(value) {\n  // success\n}, function(error) {\n  // failure\n});\n\n")])])]),s("p",[s("strong",[e._v("then")]),e._v("方法可以接受两个回调函数作为参数。第一个回调函数是Promise对象的状态变为resolved时调用，第二个回调函数是Promise对象的状态变为rejected时调用。其中，第二个函数是可选的，不一定要提供。这两个函数都接受Promise对象传出的值作为参数。")]),e._v(" "),s("hr"),e._v(" "),s("h2",{attrs:{id:"promise-prototype-then"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#promise-prototype-then"}},[e._v("#")]),e._v(" promise.prototype.then()")]),e._v(" "),s("p",[e._v("Promise 实例具有then方法，也就是说，then方法是定义在原型对象"),s("strong",[e._v("Promise.prototype")]),e._v("上的。它的作用是为 Promise 实例添加状态改变时的回调函数。前面说过，then方法的第一个参数是resolved状态的回调函数，第二个参数（可选）是rejected状态的回调函数。")]),e._v(" "),s("p",[e._v("then方法返回的是一个新的Promise实例（注意，不是原来那个Promise实例）。因此可以采用链式写法，即then方法后面再调用另一个then方法。")]),e._v(" "),s("h3",{attrs:{id:"then的链式调用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#then的链式调用"}},[e._v("#")]),e._v(" then的链式调用:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('getJSON("/post/1.json").then(function(post) {\n  return getJSON(post.commentURL);\n}).then(function (comments) {\n  console.log("resolved: ", comments);\n}, function (err){\n  console.log("rejected: ", err);\n});\n\n')])])]),s("p",[e._v("上面代码中，第一个then方法指定的回调函数，返回的是另一个Promise对象。这时，第二个then方法指定的回调函数，就会等待这个新的Promise对象状态发生变化。如果变为resolved，就调用第一个回调函数，如果状态变为rejected，就调用第二个回调函数。")]),e._v(" "),s("h3",{attrs:{id:"一个-promise-就是一个对象，它代表了一个异步操作的最终完成或者失败。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一个-promise-就是一个对象，它代表了一个异步操作的最终完成或者失败。"}},[e._v("#")]),e._v(" 一个 Promise 就是一个对象，它代表了一个异步操作的最终完成或者失败。")]),e._v(" "),s("p",[e._v("Promise.prototype.catch()方法是.then(null, rejection)或.then(undefined, rejection)的别名，用于指定发生错误时的回调函数。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("getJSON('/posts.json').then(function(posts) {\n  // ...\n}).catch(function(error) {\n  // 处理 getJSON 和 前一个回调函数运行时发生的错误\n  console.log('发生错误！', error);\n});\n\n")])])]),s("p",[e._v("上面代码中，getJSON()方法返回一个 Promise 对象，如果该对象状态变为resolved，则会调用then()方法指定的回调函数；如果异步操作抛出错误，状态就会变为rejected，就会调用catch()方法指定的回调函数，处理这个错误。另外，then()方法指定的回调函数，如果运行中抛出错误，也会被catch()方法捕获。")]),e._v(" "),s("h2",{attrs:{id:"promise-prototype-finally"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#promise-prototype-finally"}},[e._v("#")]),e._v(" Promise.prototype.finally()")]),e._v(" "),s("p",[e._v("**finally()**方法用于指定不管 Promise 对象最后状态如何，都会执行的操作。该方法是 ES2018 引入标准的。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("promise\n.then(result => {···})\n.catch(error => {···})\n.finally(() => {···});\n\n")])])]),s("h2",{attrs:{id:"promise-all"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#promise-all"}},[e._v("#")]),e._v(" promise.all()")]),e._v(" "),s("p",[e._v("**Promise.all()**方法用于将多个 Promise 实例，包装成一个新的 Promise 实例.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const p = Promise.all([p1, p2, p3]);\n\n")])])]),s("p",[e._v("上面代码中，Promise.all()方法接受一个数组作为参数，p1、p2、p3都是 Promise 实例，如果不是，就会先调用下面讲到的Promise.resolve方法，将参数转为 Promise 实例，再进一步处理。另外，Promise.all()方法的参数可以不是数组，但必须具有 Iterator 接口，且返回的每个成员都是 Promise 实例。")]),e._v(" "),s("p",[e._v("p的状态由p1、p2、p3决定，分成两种情况。")]),e._v(" "),s("p",[e._v("（1）只有p1、p2、p3的状态都变成fulfilled，p的状态才会变成fulfilled，此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数。")]),e._v(" "),s("p",[e._v("（2）只要p1、p2、p3之中有一个被rejected，p的状态就变成rejected，此时第一个被reject的实例的返回值，会传递给p的回调函数。")]),e._v(" "),s("h2",{attrs:{id:"promise-race"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#promise-race"}},[e._v("#")]),e._v(" promise.race()")]),e._v(" "),s("p",[e._v("**Promise.race()**方法同样是将多个 Promise 实例，包装成一个新的 Promise 实例。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const p = Promise.race([p1, p2, p3]);\n\n")])])]),s("p",[e._v("上面代码中，只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给p的回调函数。")]),e._v(" "),s("p",[e._v("Promise.race()方法的参数与Promise.all()方法一样，如果不是 Promise 实例，就会先调用下面讲到的Promise.resolve()方法，将参数转为 Promise 实例，再进一步处理。")]),e._v(" "),s("h2",{attrs:{id:"promise-allsettled"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#promise-allsettled"}},[e._v("#")]),e._v(" Promise.allSettled()")]),e._v(" "),s("p",[e._v("Promise.allSettled()方法接受一组 Promise 实例作为参数，包装成一个新的 Promise 实例。只有等到所有这些参数实例都返回结果，不管是fulfilled还是rejected，包装")]),e._v(" "),s("p",[e._v("实例才会结束。该方法由 ES2020 引入。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const promises = [\n  fetch('/api-1'),\n  fetch('/api-2'),\n  fetch('/api-3'),\n];\n\nawait Promise.allSettled(promises);\nremoveLoadingIndicator();\n\n")])])]),s("p",[e._v("上面代码对服务器发出三个请求，等到三个请求都结束，不管请求成功还是失败，加载的滚动图标就会消失。")]),e._v(" "),s("h2",{attrs:{id:"promise-any"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#promise-any"}},[e._v("#")]),e._v(" Promise.any()")]),e._v(" "),s("p",[e._v("Promise.any()方法接受一组 Promise 实例作为参数，包装成一个新的 Promise 实例。只要参数实例有一个变成fulfilled状态，包装实例就会变成fulfilled状态；如果所有参数实例都变成rejected状态，包装实例就会变成rejected状态。该方法目前是一个第三阶段的提案 。")]),e._v(" "),s("p",[e._v("Promise.any()跟Promise.race()方法很像，只有一点不同，"),s("strong",[e._v("就是不会因为某个 Promise 变成rejected状态而结束")]),e._v("。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const promises = [\n  fetch('/endpoint-a').then(() => 'a'),\n  fetch('/endpoint-b').then(() => 'b'),\n  fetch('/endpoint-c').then(() => 'c'),\n];\ntry {\n  const first = await Promise.any(promises);\n  console.log(first);\n} catch (error) {\n  console.log(error);\n}\n")])])])])}),[],!1,null,null,null);r.default=a.exports}}]);